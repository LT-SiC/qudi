use std::env;
use std::path::PathBuf;

fn main() {
    println!("cargo:rustc-link-lib=wlmData");
    println!("cargo:rustc-link-search=lib/");

    println!("cargo:rerun-if-changed=include/wlmData.h");

    let bindings = bindgen::Builder::default()
        .header("include/wlmData.h")
        .parse_callbacks(Box::new(bindgen::CargoCallbacks))
        // Function for general usage
        .allowlist_function("Instantiate")
        .allowlist_function("WaitForWLMEvent(Ex)?")
        .allowlist_function("ClearWLMEvents")
        .allowlist_function("ControlWLM(Ex)?")
        .allowlist_function("SyncronizeWLM")
        .allowlist_function("SetMeasurementDelayMethod")
        .allowlist_function("SetWLMPriority")
        .allowlist_function("PresetWLMIndex")
        .allowlist_function("GetWLM(Version|Index|Count)")
        // General Get... & Set...-functions
        .allowlist_function("Get(Cal)?Wavelength(2|Num)?")
        .allowlist_function("GetCalibrationEffect")
        .allowlist_function("GetFrequency(2|Num)?")
        .allowlist_function("GetLinewidth(Num)?")
        .allowlist_function("GetDistance")
        .allowlist_function("GetAnalogIn")
        .allowlist_function("GetMultimodeInfo")
        .allowlist_function("(Get|Set)Temperature")
        .allowlist_function("(Get|Set)Pressure")
        .allowlist_function("(Get|Set)AirParameters")
        .allowlist_function("(Get|Set)ExternalInput")
        .allowlist_function("(Get|Set)ExtraSetting")
        .allowlist_function("(Get|Set)Exposure(2|Num(Ex)?)?")
        .allowlist_function("(Get|Set)ExposureMode(Num)?")
        .allowlist_function("(Get|Set)ExposureRange(Ex)?")
        .allowlist_function("(Get|Set)AutoExposureSetting")
        .allowlist_function("(Get|Set)ResultMode")
        .allowlist_function("(Get|Set)Range")
        .allowlist_function("(Get|Set)PulseMode")
        .allowlist_function("(Get|Set)PulseDelay")
        .allowlist_function("(Get|Set)PulseIntegration")
        .allowlist_function("(Get|Set)WideMode")
        .allowlist_function("(Get|Set)DisplayMode")
        .allowlist_function("(Get|Set)FastMode")
        .allowlist_function("(Get|Set)LinewidthMode")
        .allowlist_function("(Get|Set)DistanceMode")
        .allowlist_function("(Get|Set)SwitcherMode")
        .allowlist_function("(Get|Set)SwitcherChannel")
        .allowlist_function("(Get|Set)SwitcherSignalStates")
        .allowlist_function("SetSwitcherSignal")
        .allowlist_function("(Get|Set)AutoCalMode")
        .allowlist_function("(Get|Set)AutoCalSetting")
        .allowlist_function("(Get|Set)ActiveChannel")
        .allowlist_function("GetChannelsCount")
        .allowlist_function("GetOperationState")
        .allowlist_function("Operation")
        .allowlist_function("SetOperationFile")
        .allowlist_function("(Power)?Calibration")
        .allowlist_function("RaiseMeasurementEvent")
        .allowlist_function("TriggerMeasurement")
        .allowlist_function("GetTriggerState")
        .allowlist_function("(Get|Set)Interval(Mode|TriggerRate)?")
        .allowlist_function("(Get|Set)Background")
        .allowlist_function("(Get|Set)AveragingSettingNum")
        .allowlist_function("(Get|Set)LinkState")
        .allowlist_function("LinkSettingsDlg")
        .allowlist_function("(Get|Set)Pattern(ItemSize|ItemCount|Num|Data|DataNum)?")
        .allowlist_function("(Get|Set)Analysis(Mode|ItemSize|ItemCount|Data)?")
        .allowlist_function("(Get|Set)(Min|Max|Avg)Peak2?")
        .allowlist_function("Get|(Amplitude|Intensity|Power)Num")
        .allowlist_function("(Get|Set)Delay")
        .allowlist_function("(Get|Set)Shift2?")
        .allowlist_function("(Get|Set)Gain")
        // Deviation (Laser Control) and PID-functions
        .allowlist_function("(Get|Set)Deviation(Mode|Reference|Sensitivity|Signal)(Num)?")
        .allowlist_function("RaiseDeviationSignal")
        .allowlist_function("(Get|Set)PID(Course|Setting)(Num)?")
        .allowlist_function("(Get|Set)LaserControlSetting")
        .allowlist_function("ClearPIDHistory")
        // Other...-functions
        .allowlist_function("Convert(Delta)?Unit")
        .allowlist_var("cInst.*")
        .allowlist_var("cNotify.*")
        .allowlist_var("ResERR_.*")
        .allowlist_var("cmi.*")
        .allowlist_var("ces.*")
        .allowlist_var("cCtrl.*")
        .allowlist_var("c(Stop|Adjustment|Measurement)")
        .allowlist_var("cExpo.*")
        .allowlist_var("c(Min|Max|Avg).*")
        .allowlist_var("cRange.*")
        .allowlist_var("cReturn.*")
        .allowlist_var("cPower.*")
        .allowlist_var("c(HeNe|NeL|Other|FreeHeNe|SLR).*")
        .allowlist_var("cAC.*")
        .allowlist_var("c(IntSensor(1|2)|TryWOStoreDark)")
        .allowlist_var("c(Get|Set)Sync")
        .allowlist_var("cPattern.*")
        .allowlist_var("cAnalysis.*")
        .allowlist_var("cSignal.*")
        .allowlist_var(
            "c(JustStep(Down|Up)|RestartAtMinimum|DriveToLevel|(Dont)?ConsiderFeedback).*",
        )
        .allowlist_var("cInfo.*")
        .allowlist_var("cAvrg.*")
        .allowlist_var("InfNothingChanged")
        .allowlist_var("(fl)?Err.*")
        .generate()
        .expect("Unable to generate bindings");

    // Write the bindings to the $OUT_DIR/bindings.rs file.
    let out_path = PathBuf::from(env::var("OUT_DIR").unwrap());
    bindings
        .write_to_file(out_path.join("bindings.rs"))
        .expect("Couldn't write bindings!");
}
