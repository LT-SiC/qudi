#  Example Qudi configuration file.
#
#
#
# IMPORTANT: The format of every 'module.Class' line has changed on 28.6.2015.
# =========  The class name now needs to be explicitly given here in the config.
#		  the config line must the form package.module.Class.ClassName
global:
    # list of modules to load when starting
    startup: ['man', 'tray', 'tasklogic']#, 'setupcontrol', 'counter', 'confocal']

    module_server:
        address: 'localhost'
        port: 12345

    ## For controlling the appearance of the GUI:
    stylesheet: 'qdark.qss'

hardware:
    microwave_1:
        module.Class: 'microwave.mw_source_dummy.MicrowaveDummy'

    mcas_dict_awg:
        module.Class: 'Keysight_AWG_M8190.pym8190a.mcas_dict_holder'
        name: 'awg_holder'

    mycounter:
        module.Class: 'timetagger_counter.TimeTaggerCounter'
        timetagger_channel_apd_0: 1
        timetagger_channel_apd_1: 1
        timetagger_sum_channels: False

    pulsestreamer:
        module.Class: 'swabian_instruments.pulse_streamer.PulseStreamer'
        #pulsestreamer_ip: '129.69.46.51' #master
        pulsestreamer_ip: '129.69.46.36' #slave
        pulsed_file_dir: 'C:\\Software\\pulsed_files'
        laser_channel: 0
        uw_x_channel: 2
        use_external_clock: False
        external_clock_option: 0

    odmrcounterdummy:
        module.Class: 'odmr_counter_dummy.ODMRCounterDummy'
        clock_frequency: 100 # in Hz
        number_of_channels: 2
        connect:
            fitlogic: 'fitlogic' #


    nicard_6323:
        module.Class: 'national_instruments_x_series.NationalInstrumentsXSeries'
        photon_sources:
            - '/Dev1/PFI0'
        #    - '/Dev1/PFI9'
        clock_channel: '/Dev1/Ctr0'
        default_clock_frequency: 100 # optional, in Hz
        counter_channels:
            - '/Dev1/Ctr1'
        counter_ai_channels:
            - '/Dev1/AI0'
        counter_voltage_range: [-10, 10]
        default_scanner_clock_frequency: 100 # optional, in Hz
        scanner_clock_channel: '/Dev1/Ctr2'
        pixel_clock_channel: '/Dev1/PFI6'
        scanner_ao_channels:
            - '/Dev1/AO0'
            - '/Dev1/AO1'
            - '/Dev1/AO2'
            - '/Dev1/AO3'
        # scanner_ai_channels:
        #     - '/Dev1/AI1'
        scanner_counter_channels:
            - '/Dev1/Ctr3'
        scanner_voltage_ranges:
            - [-10, 10]
            - [-10, 10]
            - [0, 10]
            - [-10, 10]
        scanner_position_ranges:
            - [-104.86e-6, 104.86e-6]
            - [-104.86e-6, 104.86e-6]
            - [0, 15e-6]
            - [-10, 10]

        odmr_trigger_channel: '/Dev1/PFI7'

        gate_in_channel: '/Dev1/PFI9'
        default_samples_number: 50
        max_counts: 3e7
        read_write_timeout: 10
        counting_edge_rising: True

    fastcounter_timetagger:
        module.Class: 'swabian_instruments.timetagger_fast_counter.TimeTaggerFastCounter'
        timetagger_channel_apd_0: 2
        timetagger_channel_apd_1: 1
        timetagger_channel_detect: 4
        timetagger_channel_sequence: 5
        timetagger_sum_channels: True
        # timetagger_sum_channels: False
    
    timetagger:
        module.Class: 'swabian_instruments.timetagger.TT'
        hist:
            click_channel: 1
            start_channel: 4
            #next_channel: 12 #negative slope of channel 4
            #sync_channel: 7
            binwidth: 200
            number_of_bins: 100
            #n_histograms: 1

        time_diff:
            click_channel: 1
            start_channel: 4
            next_channel: 12 #negative slope of channel 4
            sync_channel: 7
            binwidth: 1000
            n_bins: 30
            n_histograms: 1

        corr:
            channel_start: 1
            channel_stop: 2
            binwidth: 1000
            number_of_bins: 1000
            ctrate:
            channels: [1,2]

        counter:
            channels: [1,2]
            bins_width: 1000000000 #1ms
            n_values: 40

        combiner:
            channels: [3,4]

        test_channels: [] #[1,2,3,4,5,6,7]#[1,2, 4, -4]

        channels_params:
            six: # cwave internal scanner
                delay: 0
                trigger_level: 1

    ni_usb6211:
        module.Class: 'ni_usb6211.NI_USB6211'

    oceanviewspectrometer:
        module.Class: 'spectrometer.oceanoptics_spectrometer.OceanOptics'
        spectrometer_serial: 'QEP02179' #insert here the right serial number.
        # integration_time: 2 # second(s)
    

    dummyoceanviewspectrometer:
        module.Class: 'spectrometer.spectrometer_dummy.SpectrometerInterfaceDummy'
        spectrometer_serial: 'QEP02179' #insert here the right serial number.
        connect:
            fitlogic: 'fitlogic'
    

logic:

    nuclearopslogic:
        module.Class: 'NuclearOPs.NuclearOPs'
        #connect:
            #confocal: 'scannerlogic'
            #mcas_dict: 'mcas_dict_awg'
            #transition_tracker : 'transitiontrackerlogic'

    plelogic:
        module.Class: 'ple_logic.ple_logic.PLELogic'
    
    odmrlogic:
        module.Class: 'odmrlogic.odmr_logic.ODMRLogic_holder'
        connect:
            counter_device: 'timetagger'
            savelogic: 'savelogic'
            mcas_holder: 'mcas_dict_awg'

    rabilogic:
        module.Class: 'rabi_logic.rabi_logic.RabiLogic'
        connect:
            counter_device: 'timetagger'
            savelogic: 'savelogic'
            mcas_holder: 'mcas_dict_awg'
        
    counterlogic:
        module.Class: 'counter_logic.CounterLogic'
        connect:
            counter1: 'mycounter'
            savelogic: 'savelogic'
    
    scannerlogic:
        module.Class: 'confocal_logic.ConfocalLogic'
        connect:
            confocalscanner1: 'scanner_tilt_interfuse'
            savelogic: 'savelogic'

    scanner_tilt_interfuse:
        module.Class: 'interfuse.scanner_tilt_interfuse.ScannerTiltInterfuse'
        connect:
            confocalscanner1: 'nicard_6323'

    optimizerlogic:
        module.Class: 'optimizer_logic.OptimizerLogic'
        connect:
            confocalscanner1: 'scanner_tilt_interfuse'
            fitlogic: 'fitlogic'

    pulsedmasterlogic:
        module.Class: 'pulsed.pulsed_master_logic.PulsedMasterLogic'
        connect:
            pulsedmeasurementlogic: 'pulsedmeasurementlogic'
            sequencegeneratorlogic: 'sequencegeneratorlogic'

    sequencegeneratorlogic: # needed by pulsedmasterlogic
        module.Class: 'pulsed.sequence_generator_logic.SequenceGeneratorLogic'
        #assets_storage_path: 'C:/Users/<username>/saved_pulsed_assets'
        #additional_predefined_methods_path: 'C:\\Custom_dir'  # optional, can also be lists on several folders
        #additional_sampling_functions_path: 'C:\\Custom_dir'  # optional, can also be lists on several folders
        #overhead_bytes: 4294967296  # Not properly implemented yet
        connect:
            pulsegenerator: 'pulsestreamer'

    pulsedmeasurementlogic: # needed by pulsedmasterlogic
        module.Class: 'pulsed.pulsed_measurement_logic.PulsedMeasurementLogic'
        raw_data_save_type: 'text'  # optional
        #additional_extraction_path: 'C:\\Custom_dir\\Methods'  # optional
        #additional_analysis_path: 'C:\\Custom_dir\\Methods'  # optional
        connect:
            fastcounter: 'fastcounter_timetagger'
            pulsegenerator: 'pulsestreamer'
            fitlogic: 'fitlogic'
            savelogic: 'savelogic'
            microwave: 'microwave_1'

    savelogic:
        module.Class: 'save_logic.SaveLogic'
        win_data_directory: 'C:/Data'   # DO NOT CHANGE THE DIRECTORY HERE! ONLY IN THE CUSTOM FILE!
        unix_data_directory: 'Data/'
        log_into_daily_directory: True
        save_pdf: False
        save_png: True

    fitlogic:
        module.Class: 'fit_logic.FitLogic'

    laserscannerlogic:
        module.Class: 'laserscanner.laser_scanner_logic.LaserScannerLogic'
        connect:
            confocalscanner1: 'nicard_6323'
            savelogic: 'savelogic'
            #setupcontrollogic: 'setupcontrollogic'
            mcas_holder: 'mcas_dict_awg'
            fitlogic: 'fitlogic'

    laserscannerlogic_fitting:
        module.Class: 'laserscanner.laser_scanner_logic_fitting.LaserScannerLogic'
        connect:
            confocalscanner1: 'nicard_6323'
            savelogic: 'savelogic'
            #setupcontrollogic: 'setupcontrollogic'
            mcas_holder: 'mcas_dict_awg'
            fitlogic: 'fitlogic'
    
    tasklogic:
        module.Class: 'taskrunner.TaskRunner'
        tasks:
            scannerLocationRefocus:
                module: 'refocus'
                pausetasks: ['scan', 'odmr']
                needsmodules:
                    optimizer: 'optimizerlogic'

    kernellogic:
        module.Class: 'jupyterkernel.kernellogic.QudiKernelLogic'
        remoteaccess: True
    
    setupcontrollogic:
        module.Class: 'setup_control_logic_automization.SetupControlLogic'
        connect:
            mcas_holder: 'mcas_dict_awg'
            powercontrol: 'laserpowerlogic'
            automizedmeasurementlogic: 'automationlogic'
            savelogic: 'savelogic'

    laserpowerlogic:
        module.Class: 'laser_power_photodiode.LaserPowerHolder'
        connect:
            ao_module: 'ni_usb6211'

    transitiontrackerlogic:
        module.Class: 'transition_tracker.TransitionTracker'
        connect:
            mcas_holder: 'mcas_dict_awg'

    poimanagerlogic:
        module.Class: 'poi_manager_logic.PoiManagerLogic'
        connect:
            optimiserlogic: 'optimizerlogic'
            scannerlogic: 'scannerlogic'
            savelogic: 'savelogic'

    automationlogic:
        module.Class: 'automation_pi3.Automatedmeasurement'
        connect:
            optimizerlogic: 'optimizerlogic'
            scannerlogic: 'scannerlogic'
            spectrumlogic: 'spectrumlogic'
            mcas_holder: 'mcas_dict_awg'
            counterlogic: 'counterlogic'
            laserscannerlogic: 'laserscannerlogic'

    spectrumlogic:
        module.Class: 'spectrum.SpectrumLogic'
        connect:
            spectrometer: 'oceanviewspectrometer'
            #spectrometer: 'dummyoceanviewspectrometer'
            #pulser: 'pulser'
            savelogic: 'savelogic'
            fitlogic: 'fitlogic'

    gatedcounterlogic:
        module.Class: 'counter_logic.CounterLogic'
        connect:
            counter1: 'mycounter'
            savelogic: 'savelogic'

    trace_analysis_logic:
        module.Class: 'trace_analysis_logic.TraceAnalysisLogic'
        connect:
            counterlogic1: 'gatedcounterlogic'
            savelogic: 'savelogic'
            fitlogic: 'fitlogic'

    timetaggerlogic:
        module.Class: 'timetagger_erik.timetaggerlogic.TimeTaggerLogic'
        connect:
            savelogic: 'savelogic'
            counter_device: 'timetagger'

gui:
    tray:
        module.Class: 'trayicon.TrayIcon'

    man:
        module.Class: 'manager.managergui.ManagerGui'



    setupcontrol:
        module.Class: 'setupcontrol.setupcontrolgui.SetupControlGUI'
        connect:
            setupcontrollogic: 'setupcontrollogic'

    counter:   
        module.Class: 'counter.countergui.CounterGui'
        connect:
            counterlogic1: 'counterlogic'

    confocal:
        module.Class: 'confocal.confocalgui_automization.ConfocalGui'
        connect:
            confocallogic1: 'scannerlogic'
            savelogic: 'savelogic'
            optimizerlogic1: 'optimizerlogic'
            automizedmeasurementlogic: 'automationlogic'
        fixed_aspect_ratio_xy: True
        fixed_aspect_ratio_depth: True
        slider_stepsize: 0.001  # in micrometer
        image_x_padding: 0.02
        image_y_padding: 0.02
        image_z_padding: 0.02
        default_meter_prefix: 'u'

    PLE:
        module.Class: 'laserscanner.laserscannergui.VoltScanGui'
        connect:
            voltagescannerlogic1: 'laserscannerlogic'
    
    PLEWithFit:
        module.Class: 'laserscanner.laserscannergui_fitting.VoltScanGui'
        connect:
            voltagescannerlogic1: 'laserscannerlogic_fitting'

    pulsedmeasurement:
       module.Class: 'pulsed.pulsed_maingui.PulsedMeasurementGui'
       connect:
           pulsedmasterlogic: 'pulsedmasterlogic'

    poimanager:
        module.Class: 'poimanager.poimangui.PoiManagerGui'
        connect:
            poimanagerlogic: 'poimanagerlogic'
            scannerlogic: 'scannerlogic'
    

    spectrometer:
        module.Class: 'spectrometer.spectrometergui.SpectrometerGui'
        connect:
            spectrumlogic: 'spectrumlogic'
    
    TransitionTracker:
        module.Class: 'transition_tracker.transition_tracker_gui.TransitionTrackerGui'
        connect:
            transition_tracker_logic: 'transitiontrackerlogic'

    ODMR:
        module.Class: 'odmr.odmrgui.ODMRGUI'
        connect:
            _odmr_logic: 'odmrlogic'
        #    savelogic: 'savelogic'

    Rabi:
        module.Class: 'rabi.rabigui.RabiGUI'
        connect:
            _rabi_logic: 'rabilogic'
        #    savelogic: 'savelogic'

    # Automatedmeasurement:
    #     module.Class: 'automizedmeasurement.automizedmeasurementgui.AutomizedMeasurementGUI'
    #     connect:
    #         automizedmeasurementlogic: 'automationlogic'
    

    gatedcounter:
        module.Class: 'gated_counter.gated_counter_gui.GatedCounterGui'
        connect:
            gatedcounterlogic1: 'gatedcounterlogic'
            traceanalysislogic1: 'trace_analysis_logic'

    timetaggergui:
        module.Class: 'timetaggergui_erik.timetaggergui.TimeTaggerGUI'
        connect:
            timetaggerlogic: 'timetaggerlogic'
